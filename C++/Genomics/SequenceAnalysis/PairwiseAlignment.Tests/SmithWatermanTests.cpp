#include "stdafx.h"
#include "CppUnitTest.h"
#include <Windows.h>
#include "SmithWaterman.h"
#include "AlignmentModel.h"
#include "FastaFile.h"

#include <sstream>

using namespace Microsoft::VisualStudio::CppUnitTestFramework;
using std::string;
using std::stringstream;



namespace SmithWatermanTests
{

	void writeToClipboard(string text) {
		if (!OpenClipboard(NULL)) throw "Cannot open the Clipboard";
		if (!EmptyClipboard()) throw "Cannot empty the Clipboard";
		int textSize = text.size() + 1;
		HGLOBAL hGlob = GlobalAlloc(GMEM_FIXED, textSize);
		if (hGlob == NULL) throw "Cannot allocate memory";
		strcpy_s((char*) hGlob, textSize, text.c_str());
		if (::SetClipboardData(CF_TEXT, hGlob) == NULL) throw "Error setting clipboard data";
		GlobalFree(hGlob);
		CloseClipboard();
	}

	void AreEqual(const char * expected, string actual) {
		Assert::AreEqual(expected, actual.c_str());
	};

	void AreEqual(const char * expected, BiologicalSequence actual) {
		AreEqual(expected, actual.str());
	};

	void AreEqual(string expected, string actual) {
		Assert::AreEqual(expected, actual);
	};



	TEST_CLASS(SmithWatermanTests)
	{
	public:

		TEST_METHOD(TestBlosum62ProteinModel_LinearGapCost_GlobalSameAsLocal) {

			auto model = blosum62ProteinModel(5, 5);
			string a = "HAPHIFPMWRSQDCYKFEVGHRDNVCPIREGKPYIAKCVTTKCMDNDETHDLIKQLPRNWFVADFKDGGELPCPTCPNLVKVHVRLVMADIITADYNFGTAQPKWDSCQPYASCFWFPVKIVKWTRGVPKGYENRGRCDEVALHQQWKTPFFDIVPVEYLFSPWLRPGENVKASLHSDMNVREWYAFTMHLVVSAQMHYRHFCQDWWSRKYRRNDCVNHFYLCMAGRIYDATNFYTHVRDQMTEFMWKFLAYIWELMILLWSHMLFPSVYMQLLTRSIEQNAFSDPCLFPLHRHAWETMLRGFQPKGSAMLNYFDCPNELMATSHTITVPSYSYMITHCKRVPAGNIQAQHDVPICFYEIPRRGYCQPRYNREQIHPRWFNPPPGWPTEEPRKTAYAGTTHAQHGHKEMESWYCPIGPMFMEMCYLRIYVDRVRGVMIRVTVNQHFGQTYVKAHGRKEMEQGHVNMSCKEYEEVWNGPEKCRFNWKSNVKINYRIARSALTEGVQLFHHDSPRLEAGHHMMVPNDMWWEWMEMVCQGSTMPLLNAKPFHHYKPVMMRLIVERPEWTHCQYPCPFWIATWWISCGEDPWGWTYLPHGSFFGHVEHYEKNVNRYKQSRLPAHKWIRMFDCLWLITFLFVVTDCMLNYVYHQGQALKEGTNTRSQHQGLNAGPARDCYLDCYDQEMHSIEHYYMCYWVPTVNGMSCCHKDDDCQPDKLDECQHLFNMCTSGKYIQYGQVFIMSVYAQQDHSFQSQFWPIAWHTVCRHDEPGSPLCYCKDCHQAEDISGLWPAWTDDASYNWEHSNRGNNLNSQEGTFHFMPEPCDFLHMPHCYMPREPAAPYMPGYCAP";
			string b = "HAPHIFPMWRSQDSYDNVCPIRYIAKCVTTKCMDQDETHDLIKQLIRNWFVFCGGGLPCPTKPNLVKVHVKLVMACIITCDYNFYTNMKPKWDSCLGPWRPYASCLELTGCTFPVKIVKWTSGVWPTGIMDEVALHQQWKTPFFDEYLFSPKNKMLPPGGNIYWPFYDKASLHSDMNVREWYAFTMHLVVSAFMHYRHFCSDWWSRKYRRNDCLYISQLKNDFYACMAVHVRDWYNWTTHFMWKFLAYIIEQMILLWSHMLSPSNYMQLLTDWFLLVMSIEQNAFSDPCLFPLHRSAIETKLRLGKLRDFQPVWCSAMLNGEVCPPFEAGNHHELMATSHTITVPSYSYHIEVPKGNIYMEEAQHDVPICFYEIDRRRLLVPYCQPRYNREQIHPRWFNPNPGWPTEESMAQHGHSERESAYCPIYSCQHNQHFDTWTMCETYVKAHGRKQMEQYEEVTYFHHSTYNWNSNVKIEYRIARSALTEGVQLFHHDSPSLDAGHHMMVPNDMWWEWMEMVCPGSTTLQLPLLVVEGMQKPFHHYIYYERPTWTHCQYPCPFWIATWWIRPWGWTNLPHGDVPFFGKFGHYEKNPNGCFEEYFWGEIDWLRLPAHKWINMFDCTWLITFLFHVTVHTLLGKMLNYVYHQGQALKEGWNGQHAHAHFYGCCYDQYMHSIEVPCEMGSYMCYWVPEDCAYADFAVNGMSCCHKDDDCQPDKLDECQHLYIFHHIVNMCTSGKMIQFVQPYCDLIMSVYAQQDHSFQCATMQFWPIQWHTVCRHEEGSPLCYEDISGLWPAWTDDASYNWESNRGCNLNSQEGQKIGHIMFCREYLQFMTMMSMHKEWTCYKCDLNCYEPNEPAAPYMPGYCYP";

			auto sw = SmithWaterman(a, b, model);
			auto alignment = sw.align();
			AreEqual(
				"HAPHIFPMWRSQDCYKFEVGHRDNVCPIREGKPYIAKCVTTKCMDNDETHDLIKQLPRNWFVADFKDGGELPCPTCPNLVKVHVRLVMADIITADYNFGT-AQPKWDSC----QPYASC--F---WFPVKIVKWTRGVPKGYENRGRCDEVALHQQWKTPFFDIVPVEYLFSP---WLRPGENV------KASLHSDMNVREWYAFTMHLVVSAQMHYRHFCQDWWSRKYRRNDCVNHFYLCMAGRIYDATNFYTHVRD--Q-MTEFMWKFLAYIWELMILLWSHMLFPSVYMQLLT------RSIEQNAFSDPCLFPLHRHAWETMLR-G----FQPKG-SAMLNYFDC-P----N--ELMATSHTITVPSYSYMITHCKRVPAGNI---QAQHDVPICFYEIP-RR---GYCQPRYNREQIHPRWFNPPPGWPTEEPRKTAYAGTTHAQHGHKEMESWYCPIGPMFMEMCYLRIYVDRVRGVMIRVTVNQHFGQTYVKAHGRKEMEQGHVNMSCKEYEEVWNGPEKCRFNWKSNVKINYRIARSALTEGVQLFHHDSPRLEAGHHMMVPNDMWWEWMEMVCQGS-T--MPLL--NA--KPFHHYKPVMMRLIVERPEWTHCQYPCPFWIATWWISCGEDPWGWTYLPHGS--FFGHVEHYEKNVN----RY--KQ-S--RLPAHKWIRMFDCLWLITFLF-V-V-T--DCMLNYVYHQGQALKEGTNTRSQHQGLNAGPARDCYLDCYDQEMHSIE---HY--YMCYWVP--------TVNGMSCCHKDDDCQPDKLDECQHL--F----NMCTSGKYIQYGQVF---IMSVYAQQDHSFQ--S-QFWPIAWHTVCRHDEPGSPLCYCKDCHQAEDISGLWPAWTDDASYNWEHSNRGNNLNSQEG-TF-H--FMPEPCDFL-HMP-H----CY---M----PREPAAPYMPGYCAP",
				alignment.front().first);

			AreEqual("HAPHIFPMWRSQDSY-------DNVCPIR----YIAKCVTTKCMDQDETHDLIKQLIRNWFV--FCGGG-LPCPTKPNLVKVHVKLVMACIITCDYNFYTNMKPKWDSCLGPWRPYASCLELTGCTFPVKIVKWTSGV---WPT-GIMDEVALHQQWKTPFFD----EYLFSPKNKMLPPGGNIYWPFYDKASLHSDMNVREWYAFTMHLVVSAFMHYRHFCSDWWSRKYRRNDCL-YISQ-LKNDFY-AC-MAVHVRDWYNWTTHFMWKFLAYIIEQMILLWSHMLSPSNYMQLLTDWFLLVMSIEQNAFSDPCLFPLHRSAIETKLRLGKLRDFQPVWCSAMLNGEVCPPFEAGNHHELMATSHTITVPSYSY---HIE-VPKGNIYMEEAQHDVPICFYEIDRRRLLVPYCQPRYNREQIHPRWFNPNPGWPTEE--------SM-AQHGHSERESAYCPI---Y-S-C--Q-H-NQ-H---FD-TWTM-C-ETYVKAHGRKQMEQ---------YEEV-TYFHHSTYNWNSNVKIEYRIARSALTEGVQLFHHDSPSLDAGHHMMVPNDMWWEWMEMVCPGSTTLQLPLLVVEGMQKPFHHY--I----YYERPTWTHCQYPCPFWIATWWI---R-PWGWTNLPHGDVPFFGKFGHYEKNPNGCFEEYFWGEIDWLRLPAHKWINMFDCTWLITFLFHVTVHTLLGKMLNYVYHQGQALKEGWN--GQH-A-HA-HFYGC---CYDQYMHSIEVPCEMGSYMCYWVPEDCAYADFAVNGMSCCHKDDDCQPDKLDECQHLYIFHHIVNMCTSGKMIQFVQPYCDLIMSVYAQQDHSFQCATMQFWPIQWHTVCRHEE-GSPLCY-------EDISGLWPAWTDDASYNWE-SNRGCNLNSQEGQKIGHIMFCREYLQFMTMMSMHKEWTCYKCDLNCYEPNEPAAPYMPGYCYP",
				alignment.front().second);

			Assert::AreEqual(2411, sw.score());
			string result = std::to_string(sw.score()) + "\r\n" +
				alignment.front().first.str() + "\r\n" +
				alignment.front().second.str() + "\r\n";

			writeToClipboard(result);
		}

		TEST_METHOD(TestPam250ProteinModel_LinearGapCost_SampleShort) {

			auto model = pam250ProteinModel(5, 5);
			string a = "MEANLY";
			string b = "PENALTY";

			auto sw = SmithWaterman(a, b, model);
			auto alignment = sw.align();
			AreEqual(
				"EANL-Y",
				alignment.front().first);

			AreEqual(
				"ENALTY",
				alignment.front().second);

			Assert::AreEqual(15, sw.score());
			string result = std::to_string(sw.score()) + "\r\n" +
				alignment.front().first.str() + "\r\n" +
				alignment.front().second.str() + "\r\n";

			writeToClipboard(result);
		} 


		TEST_METHOD(TestPam250ProteinModel_LinearGapCost_Quiz) {

			auto model = pam250ProteinModel(5, 5);
			string a = "AMHIPDALFGNWVDEADCQDFCQRKWAHNRWSDHPETRDQMCNFYTDPSVKILITIEHLLDNGLEACMEHYPGFLINHFVGLSTMMEDQGHQQEVFIWCVAKWVHFSKLMKEEQLSPFRMCDHPKWADSCYSCAESQTPDGVVAQFAHYPQFWIKIVVHWCKFSENANRPFCDSNTSHWIASFGDPAMIRFNRYWCRCCFMLIESAEYPMQIGREIQQDFHSNDYMRSTHLPSYTMCFYYVITASIAHNRICFEDSKAFDPNEEWFNHETWLSWSFVPSKCYPDCNFYQHRGCWHWDQWKTTLHIFFQVLQDIKDVEDDESIHDKAHLWMMMECASKYFQTVIPAQANPDNGVQAHQKPCRQEYERKYYWHGQENKDIGKLSVTRGSVLQRIMMVVHEEFRNKMQSVSVKCGMAWCPCAWSNHINMMNHPEDKHIYLTRCQHCHRCYKYALHYPCRYEDMIRSDMVGDWLIDKNHPPPCWYMSGLFMWKYSVMGHTAIRDQFDRMSHVGGPARVDFRKSRPSMSTNQVWRIHNIEQCLMSKAEFPPKRDKNFKGEKRKAIDGICDEMCQFYTNMQNYGSYDCEKSDCYCNHLGKDIFDLACYECHFNWMDDKLLRSKDGLEYMQWQYCHARNPVSMVRSRPGETFKWIGLSCSRGGGLRSLWMPPDMNNIEFGIDTCTCLDWVWMMIDRQPEICYLKMLNPYREECRCILCDTFWERIFLTNEGHWTLYQKYESEMQTQSYCPANVDNSYIIKEQWRQWCIQCTIECEFGTEDEKCKWRCYVNPKNCHISSITPCFQAMFKDRVPDMTWVVDKAPGNEKEGSSYNATGYFPKDMASPWQNYPTFIYAWTLIQCKNNRMADRFMCKHGPWCMDCQMRTEDSQQYQGMGPFQVAFQDAKWLP";
			string b = "HLHWWWWFEREGFVVDFVNNESCSVPSELWDSNSHMKKYNGYNCQCNLAGQCKYMAWIAKHLARSVGKILCYIIDHYRMWWWCNAFWEGPSCIGCAAVPFQQIHFNFFNNNECMGQHPVCMGRVYKPKMHSRALAFCHHVMFAFGWDVPRQSLQIITEFWTQNVHEKSCEKAWDWSLVCQTEHVGHPLAYKGLHHYRELWGFPIFWRDRTWCIMNITFIPLSKFYPMVLQTWDCMWYKSFFDWYKEQKTLGDPFKGCWHWDQWKTTLEIFFQKAHLWMMMECSKYFQNVIPMQNIHRPNPDNGAHQVLPCRQEYENKYNKPTRQQRIMMVVHEEFRNKMHDQTVVFSCPRQICPCAWSNHINMMNHPWDKHIYLIRCQHYKYALHYPCRVMWSQHRLLDMIGDWDKNHPWPREYMSGLFMWKYKAKPKNDQFGSMSHYGHVGGGGPARVDFRYSRPIMSTNQVRRIIIHNCEQCLMSKAKNFKGEKRKGIDGICDEMCQFYTNMQNYGSYTDCYECHFNWMDDKLLRSKDGPCNIYHARNPVWRQPGMVNPFRSRIGLSCSRTQVWFYEFNKTDYLCGLRRMPSNNLWMPRLRQADMQSNIAVMFGIDTCSPGRSWFCCGVCNSLRFHFDTLQWGLQVNGHFSGHHLTNWFQTTEWHHCCTKTAIIPQCLGWSYLKIIKEQTRPIKLGDHYRSDRIIVVGYCLWIYHAVCCFHKTKNWWPSKVLLHQKKAISPDYNSPHWKNHFHKDTLHKNWVGFVMRQMGNQTLYSNEGWHLTEMKRGAWAKCWTGCTWGVMSNQQCARIDQHYPIQDNWKQLFMGPGCFRGNHFLYFLH";

			auto sw = SmithWaterman(a, b, model);
			auto alignment = sw.align();
			AreEqual(
				"WAHNRWSDHPETRDQMCNFYTDPSVKILITIEHLLDNGLEACMEHYPGFLIN-HFVGLSTMMEDQGHQQEVFIWCVAKWVHFSKLMKEEQLSPFRMCDHPKWAD-SCYSCAESQTPDGVVAQFAHYPQFWIKIVVH-WC--K-FSENAN-R--PFCDSNT-S-HWIASFGDPAMIRFNRYWCRCCF-MLIESA-EYPMQIGREIQQDFHSNDYMRSTHLPSY-TMCFYYVITASIAHNRICFEDSKAFDPNEEWFN--HETWLS-W--SFVPSKCYPDCN-FYQH-RGCWHWDQWKTTLHIFFQVLQDIKDVEDDESIHDKAHLWMMMECASKYFQTVIPAQA-N-PDNGVQAHQK-PCRQEYERKYYWHGQENKDIGKLSVTRGSVLQRIMMVVHEEFRNKM--QSVSVKCGMAWCPCAWSNHINMMNHPEDKHIYLTRCQHCHRCYKYALHYPCRYE-DMIR-SDMVGDWLIDKNHPPPCW-YMSGLFMWKYSVMG-HTAI--RDQFDRMSHVGGPARVDFRKSRPSMSTNQVWR--IHNIEQCLMSKAEFPPKRDKNFKGEKRKAIDGICDEMCQFYTNMQNYGSYDCEKSDCYCNHLGKDIFDLACYECHFNWMDDKLLRSKDGLEYMQWQYCHARNPVSMVRSRPGETFK-WIGLSCSRGGGLRSLWMPPDMNNIEF--GIDTCTCLD-WV-WMM-IDRQPEI-C-Y-LKMLNPYRE-ECRCILCDTFWERIFLTNEGHWTLYQKYESEMQTQSYCPANVDNSYIIKEQWRQWCIQCT-I-EC---EF-GTEDEKCKWRC-YVNP-KNCHISSITPC---FQAM--FKDRVPDMTWVVDKAPGNEKEG-SS-YN-A--TGYFPKD-MASPWQNYPTFIYAW-TLIQCKNN-RMADRFMCKHGPW--C-MDCQMRTEDSQQYQGMGPFQVAFQDAKW",
				alignment.front().first);

			AreEqual(
				"W-W-WWFER-E--GFVVDFVNNESCS--VPSE-LWD-S-NSHMKKYNGYNCQCNLAGQCKYMAWIA-KH--LARSVGK-I-LCYIIDHYRMW-WW-C-NAFWEGPSCIGCA-A-VPFQQI-HFNFFNNN-ECMGQHPVCMGRVYKPKMHSRALAFCHHVMFAFGWDVP-RQSLQI-ITEFWTQNVHEKSCEKAWDWSL-VCQTEHVG-HPLAY-KG--LHHYREL-WGFPI-FWRDRTW-CIMNI-TFIPLSKFYPMVLQTWDCMWYKSFF-DW-YKEQKTLGDPFKGCWHWDQWKTTLEIFF---Q-------------KAHLWMMMEC-SKYFQNVIPMQNIHRPNPDNGAHQVLPCRQEYENK-Y-------N--K-P-TR-Q--QRIMMVVHEEFRNKMHDQTVVFSCPRQICPCAWSNHINMMNHPWDKHIYLIRCQ--H--YKYALHYPCRVMWSQHRLLDMIGDW--DKNHPWP-REYMSGLFMWKYKAKPKNDQFGSMSHYGHVG-GGGPARVDFRYSRPIMSTNQVRRIIIHNCEQCLMSKA-------KNFKGEKRKGIDGICDEMCQFYTNMQNYGSY----T------------D--CYECHFNWMDDKLLRSKDG-PC-N-IY-HARNPVWRQPGM-VNPFRSRIGLSCSR--T-Q-VWF-YEFNKTDYLCGLRRMPSNNLWMPRLRQADMQSNIAVMFGIDTCSPGRSWFC-CGVCNSL--R-FHFDTLQWGL-Q-----VNGH-FSGHHLTNWFQTTE-WHHCCTKTAIIPQCLGWSYLKIIKEQ-TRPIKLGDHYRSDRIIVVGYCLWIYHAVCCF-HKTKNW-W-PSKVLLHQKKAISPDYNSPHWKNHFHKDTLHKNWVGFVMRQMGNQTLY-SNEGWHLTE--M-KRGAWAKCWTGCTWGVMSNQQCARIDQ-HYPIQD-NW",
				alignment.front().second);

			Assert::AreEqual(1162, sw.score());
			string result = std::to_string(sw.score()) + "\r\n" +
				alignment.front().first.str() + "\r\n" +
				alignment.front().second.str() + "\r\n";

			writeToClipboard(result);
		}



	};
}