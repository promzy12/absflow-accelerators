package ppfifo_testbench_classes_pkg;
  
typedef enum {clear_op, put_op, get_op, no_op} operation_t;

class ppfifo_operation #(parameter FIFO_WORD_SIZE=1);
  
  operation_t                 op;
  logic [FIFO_WORD_SIZE-1:0]  arg;
  logic [3:0]                 waits;
  logic [3:0]                 hold;
  
  function new (
    operation_t                iop     = no_op,
    logic [FIFO_WORD_SIZE-1:0] iarg    = 0,
    logic [3:0]                iwaits  = 1,
    logic [3:0]                ihold   = 1
    );
    
    op    = iop;
    arg   = iarg;
    waits = iwaits;
    hold  = ihold;

  endfunction
  
  function ppfifo_operation #(FIFO_WORD_SIZE) clone();
    ppfifo_operation #(FIFO_WORD_SIZE) c;
    c = new(op, arg, waits, hold);
    return c;  
  endfunction
 
  function bit comp(ppfifo_operation #(FIFO_WORD_SIZE) t);
    return ((t.op == op) && (t.arg == arg) && (t.waits == waits) && (t.hold == hold));
  endfunction;

  function string convert2string;
    string str;
    $sformat(str, "{ op: %7s   arg: %2d   waits: %3d   hold: %3d}",
              op, arg, waits);
    return str; 
  endfunction;
  
endclass


class ppfifo_result #(parameter FIFO_WORD_SIZE=1);
  
  logic [FIFO_WORD_SIZE-1:0] result;
  
  function new(logic [FIFO_WORD_SIZE-1:0] iresult = 0);
    result = iresult;
  endfunction;
 
  function ppfifo_result #(FIFO_WORD_SIZE) clone();
    ppfifo_result #(FIFO_WORD_SIZE) c;
    c = new(result);
    return c;
  endfunction;
  
  function bit comp (ppfifo_result #(FIFO_WORD_SIZE) r);
    return (r.result == result);
  endfunction;  
  
  function string convert2string;
    string str;
    $sformat(str, "{ value = %d }", result);
    return str;
  endfunction;
  
endclass

class ppfifo_operation_list #(FIFO_WORD_SIZE=1);
  ppfifo_operation #(FIFO_WORD_SIZE) operations[$];
endclass

class ppfifo_result_list #(FIFO_WORD_SIZE=1);
  ppfifo_result #(FIFO_WORD_SIZE) results[$];
endclass

endpackage // ppfifo_testbench_classes_pkg



