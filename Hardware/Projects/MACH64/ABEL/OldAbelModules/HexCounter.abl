MODULE DecimalCounter

///////////////////////////////////////////////////////////////////////////////////////////////////
// Author: Andre' LaMothe
//
// Last Modified: 9.4.07
//
// Description: 7-segment display demo and test program. Displays the hex digit 0...F over and over
// on the 7-segment display.               
// 
// Inputs: clock input only.
//
// Outputs: 7 active high outputs used to drive the 7-segment LED display.
//
///////////////////////////////////////////////////////////////////////////////////////////////////

DECLARATIONS

	d3..d0 node istype 'reg';			// 4-bit binary register input to 7-segment decoder
	a,b,c,d,e,f,g pin 20..24, 26,27 istype 'com';	// 7-segment LED outputs
	clock  pin 18; 					// clock pin, connect to OSC output header any pin

	cnt19..cnt0 node istype 'reg';			// register for counter division

	counter = [cnt19..cnt0];			// set for counter
	bcd  = [d3,d2,d1,d0];				// set for 4-bit input
	led7 = [a,b,c,d,e,f,g];				// set for 7-segment outputs
	
EQUATIONS
	bcd.clk = cnt18;				// assign clocks to counter MSB (slow bit)
	counter.clk = clock;				// assign global high speed clock (1MHZ+) to counter register
							// which acts as a divide by 2^n counter

	WHEN (bcd == 9) THEN {
		bcd := 0;
	} ELSE {
		bcd := bcd + 1;				// each clock increment counter, the LSB will toggle at 1/2*clock,
	}	
							// b1 at 1/4*clock, b2 at 1/8*clock and so forth, frequency divider basically

	

	// perform counter logic, 4-bit value will wrap around everytime it hits 15 or 1111 in binary
	counter := counter + 1;

	truth_table (bcd -> [a, b, c, d, e, f, g])
		    0   -> [1, 1, 1, 1, 1, 1, 0];
		    1   -> [0, 1, 1, 0, 0, 0, 0];
		    2   -> [1, 1, 0, 1, 1, 0, 1];
		    3   -> [1, 1, 1, 1, 0, 0, 1];
		    4   -> [0, 1, 1, 0, 0, 1, 1];
		    5   -> [1, 0, 1, 1, 0, 1, 1];
		    6   -> [0, 0, 1, 1, 1, 1, 1];
		    7   -> [1, 1, 1, 0, 0, 0, 0];
		    8   -> [1, 1, 1, 1, 1, 1, 1];
		    9   -> [1, 1, 1, 0, 0, 1, 1];
		    10  -> [1, 1, 1, 0, 1, 1, 1];
		    11  -> [1, 1, 1, 1, 1, 1, 1];
		    12  -> [1, 0, 0, 1, 1, 1, 0];
		    13  -> [1, 1, 1, 1, 1, 1, 0];
		    14  -> [1, 0, 0, 1, 1, 1, 1];
		    15  -> [1, 0, 0, 0, 1, 1, 1];
END

