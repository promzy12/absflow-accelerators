MODULE ButtonCounter

// Displays in binary on 4 LEDs a 4 bit counter that is
// reset by pressing button 0, preset by pushing button 1,
// and incremented or decremented by pressing button 2,
// depending on whether button 3 is up (increment) or 
// down (button 4).  Two 4-bit registers are used to debounce
// the buttons. 
//
// Mach64	       Push Button (3..0)
// 20/C0	->  	PB0
// 21/C2	->	PB1
// 22/C4	->	PB2
// 23/C6	->	PB3
//
// Mach64 	       LEDs
// 14/B8	->	L0
// 15/B10	->	L1
// 16/B12	->	L2
// 17/B14	->	L3
//
// Mach64		
// 43/CLK0_IN	->	OSC

DECLARATIONS

	// four raw button inputs
	!pb0, !pb1, !pb2, !pb3 pin 20..23;
	buttons = [pb0..pb3];

	// latest buttons status (updated every 1 ms)
	lat0..lat3 node ISTYPE 'reg';
	latest = [lat0..lat3];

	// previous buttons status (last value of latest)
	prev0..prev3 node ISTYPE 'reg';
	previous = [prev0..prev3];

	// debounced buttons status (each bit true if latest button
	// status is the same as the previous status)
	reset, preset, inc, dir node ISTYPE 'reg';
	debounced = [reset, preset, inc, dir];

	// external clock (1 MHz) 
	clock PIN 43;

	// 11-bit clock scaler (MSB toggles at 500 Hz)
	s10..s0 NODE ISTYPE 'reg';
	scaler = [s10..s0];

	// 4-bit counter
	c3..c0 PIN 17..14 ISTYPE 'reg'; 
	counter = [c3..c0];

EQUATIONS

	// increment 11-bit scaler using external (1 Mhz) clock
	scaler.clk = clock;
	scaler := scaler + 1;

	// read button status into latest using scaler MSB (500 Hz) as clock
	latest.clk = s10;
	latest := buttons;

	// copy latest button status into previous status 
	// using scaler MSB (500 Hz) as clock
	previous.clk = s10;
	previous := latest;

	// compute debounced button status as the conjuntion of the
	// the latest and previous states of the buttons using the
	// scaler MSB (500 Hz) as clock
	debounced.clk = s10;
	debounced := buttons & latest;
	
	// wire counter's clock, reset, and preset signals to 
	// three of the debounced buttons
	counter.clk = inc;
	counter.aclr = reset;
	counter.pr = preset;

	// use the fourth debounced buttons to control the direction
	// of counting, up when button up, down when button down
	when (dir == 0) then {
		counter := counter + 1;
	} else {
		counter := counter - 1;
	}

END

	



 
