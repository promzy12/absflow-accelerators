import ovm_pkg::*;
import dbctr_tb_transactions_pkg::*;

module dbctr_tb_predictor (
  ref tlm_fifo #(dbctr_operation) operation_fifo,
  ref tlm_fifo #(dbctr_result) predicted_result_fifo
);
	
	localparam min_button_hold_time = 4;
	
	// declare module scope variables
	string    module_name;
	bit [3:0] predicted_value = 0;

	// store name of module for use in report messages
	initial $sformat(module_name, "%m");
  
	task run;
	  
	  // declare static variables local to task
	  dbctr_operation operation;
	  
	  forever begin
	   
	    operation_fifo.get(operation);
	   
	    case (operation.op)
	     
	      up_op:    if (operation.hold >= min_button_hold_time) begin
	       	          predicted_value = predicted_value + 1;
	                  send_result;
                  end
	      
        down_op:  if (operation.hold >= min_button_hold_time) begin
                    predicted_value = predicted_value - 1;
	                  send_result;
                  end
                    
        load_op:  begin
                    predicted_value = operation.arg;
	                  send_result;
                  end
                   
        reset_op: begin
                    predicted_value = 0;
                    send_result;
                  end
        
      endcase
	     
 	  end
	 
  endtask
	
  task send_result;
	  
	  // declare static variables local to task
	  string       message;
	  dbctr_result predicted_result;
	  
	  // create a new result instance from the current predicted value of the counter
	  predicted_result  = new(predicted_value);
	  
	  // print the predicted value to the log
	  $sformat(message, "Predicted: %s", predicted_result.convert2string);
	  ovm_top.ovm_report_info(module_name, message, 300);
	  
	  // send the predicted value to the comparator
	  predicted_result_fifo.put(predicted_result.clone);
	  
	endtask
	 
endmodule

